name: Update README script table

on:
  push:
    branches: [ main, master ]
    paths:
      - "Code/**.R"
      - "tools/build_readme_table.R"
      - ".github/workflows/update-readme.yml"
      - "README.md"
  workflow_dispatch: {}

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo (full history for safe push)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: true

      - name: Ensure README exists
        run: |
          if [ ! -f "README.md" ]; then
            cat > README.md <<'EOF'
# R-Plot-Code

## 脚本清单（自动生成）
<!-- SCRIPTS_TABLE_START -->
<!-- SCRIPTS_TABLE_END -->
EOF
          fi

      - name: Set up R
        uses: r-lib/actions/setup-r@v2

      - name: Install R dependencies
        run: |
          Rscript -e 'tryCatch(install.packages(c("stringr","glue"), repos="https://cloud.r-project.org"), error=function(e){q(status=1)})' \
          || Rscript -e 'install.packages(c("stringr","glue"), repos="https://cran.r-project.org")'

      - name: Bootstrap script if missing
        run: |
          mkdir -p tools
          if [ ! -f "tools/build_readme_table.R" ]; then
            cat > tools/build_readme_table.R <<'RS'
suppressWarnings({suppressPackageStartupMessages({requireNamespace("stringr", quietly=TRUE);requireNamespace("glue", quietly=TRUE)})});library(stringr);library(glue)
CFG<-list(readme_path="README.md",scan_dir="Code",start_markers=c("<!-- SCRIPTS_TABLE_START -->","<!--SCRIPTS_TABLE_START-->"),end_markers=c("<!-- SCRIPTS_TABLE_END -->","<!--SCRIPTS_TABLE_END-->"),section_title_regex="^##\\s*脚本清单（自动生成）|^##\\s*脚本清单|^##\\s*Scripts?\\s*List",header_nlines=120)
read_utf8<-function(p,...) readLines(p,encoding="UTF-8",warn=FALSE,...); write_utf8<-function(x,p) writeLines(enc2utf8(x),p,useBytes=TRUE)
list_r_files<-function(r){if(!dir.exists(r)) return(character(0)); f<-list.files(r,pattern="\\.R$",recursive=TRUE,full.names=TRUE); f[order(tolower(f))]}
parse_meta<-function(p,n=CFG$header_nlines){h<-utils::head(read_utf8(p),n); g<-function(k){pat<-glue("^\\s*#+'?\\s*({paste(k,collapse='|')})\\s*[:：]\\s*(.+)\\s*$"); m<-str_match(h,regex(pat,ignore_case=TRUE)); v<-m[,3]; v<-v[!is.na(v)]; if(!length(v)) '' else str_trim(v[1])}; data.frame(script=gsub("^\\./?","",p),title=g(c("title","标题","功能","function")),input=g(c("input","输入")),output=g(c("output","输出")),note=g(c("note","备注")),stringsAsFactors=FALSE)}
render_table<-function(df){if(!nrow(df)) df<-data.frame(script="(未检测到 .R 文件)",title="",input="",output="",note=""); header<-c("| 脚本 | 功能简介 | 主要输入 | 主要输出 | 备注 |","|---|---|---|---|---|"); rows<-apply(df,1,function(r) glue("| `{r[['script']]}` | {r[['title']]} | {r[['input']]} | {r[['output']]} | {r[['note']]} |")); c(header,rows)}
patch_readme<-function(r,t){for(sm in CFG$start_markers) for(em in CFG$end_markers){s<-which(str_detect(r,fixed(sm))); e<-which(str_detect(r,fixed(em))); if(length(s)==1 && length(e)==1 && e>s) return(c(r[1:s],t,r[e:length(r)]))}; sec<-which(str_detect(r,regex(CFG$section_title_regex))); if(length(sec)>=1) return(append(r,values=c("",t,""),after=sec[1])); c(r,"","## 脚本清单（自动生成）","",t,"")}
main<-function(){f<-list_r_files(CFG$scan_dir); m<-if(length(f)) do.call(rbind,lapply(f,parse_meta)) else data.frame(); if(nrow(m)) m$script<-gsub("\\\\","/",m$script); tbl<-render_table(m); rd<-if(file.exists(CFG$readme_path)) read_utf8(CFG$readme_path) else c("# R-Plot-Code","","## 脚本清单（自动生成）","<!-- SCRIPTS_TABLE_START -->","<!-- SCRIPTS_TABLE_END -->"); new<-patch_readme(rd,tbl); write_utf8(new,CFG$readme_path); message("OK")}
tryCatch(main(), error=function(e){ message("ERROR: ",conditionMessage(e)); quit(status=1) })
RS
          fi

      - name: Run build script
        run: |
          Rscript -e 'Sys.setenv(DRYRUN="false"); source("tools/build_readme_table.R")'

      - name: Commit & push changes (if README modified)
        run: |
          if git diff --quiet --exit-code -- README.md; then
            echo "No changes in README.md, skipping commit."
            exit 0
          fi
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git pull --rebase origin "${GITHUB_REF_NAME}"
          git add README.md tools/build_readme_table.R
          git commit -m "chore: auto-update README script table [skip ci]"
          git push origin "${GITHUB_REF_NAME}"
